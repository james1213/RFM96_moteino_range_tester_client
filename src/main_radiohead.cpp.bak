// rf95_reliable_datagram_client.pde
// -*- mode: C++ -*-
// Example sketch showing how to create a simple addressed, reliable messaging client
// with the RHReliableDatagram class, using the RH_RF95 driver to control a RF95 radio.
// It is designed to work with the other example rf95_reliable_datagram_server
// Tested with Anarduino MiniWirelessLoRa, Rocket Scream Mini Ultra Pro with the RFM95W

#include <Arduino.h>
#include <RHReliableDatagram.h>
#include <RH_RF95.h>
#include "SSD1306Ascii.h"
#include "SSD1306AsciiWire.h"

#define CLIENT_ADDRESS 3
#define SERVER_ADDRESS 1

#define I2C_ADDRESS 0x3C

// Define proper RST_PIN if required.
#define RST_PIN -1

SSD1306AsciiWire oled;

// Singleton instance of the radio driver
RH_RF95 driver;
//RH_RF95 driver(5, 2); // Rocket Scream Mini Ultra Pro with the RFM95W

// Class to manage message delivery and receipt, using the driver declared above
RHReliableDatagram manager(driver, CLIENT_ADDRESS);

// Need this on Arduino Zero with SerialUSB port (eg RocketScream Mini Ultra Pro)
//#define Serial SerialUSB

void initDisplay();

void setup()
{
    // Rocket Scream Mini Ultra Pro with the RFM95W only:
    // Ensure serial flash is not interfering with radio communication on SPI bus
//  pinMode(4, OUTPUT);
//  digitalWrite(4, HIGH);

    Serial.begin(115200);
    while (!Serial) ; // Wait for serial port to be available
    initDisplay();
    if (!manager.init())
        Serial.println("init failed");
    // Defaults after init are 434.0MHz, 13dBm, Bw = 125 kHz, Cr = 4/5, Sf = 128chips/symbol, CRC on

    // The default transmitter power is 13dBm, using PA_BOOST.
    // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then
    // you can set transmitter powers from 2 to 20 dBm:
//  driver.setTxPower(20, false);
    // If you are using Modtronix inAir4 or inAir9, or any other module which uses the
    // transmitter RFO pins and not the PA_BOOST pins
    // then you can configure the power transmitter power for 0 to 15 dBm and with useRFO true.
    // Failure to do that will result in extremely low transmit powers.
//  driver.setTxPower(14, true);

    // You can optionally require this module to wait until Channel Activity
    // Detection shows no activity on the channel before transmitting by setting
    // the CAD timeout to non-zero:
//  driver.setCADTimeout(10000);
}

uint8_t data[] = "Hello World!";
// Dont put this on the stack:
uint8_t buf[RH_RF95_MAX_MESSAGE_LEN];


void loop()
{
    Serial.println("Sending to rf95_reliable_datagram_server");

    // Send a message to manager_server
    if (manager.sendtoWait(data, sizeof(data), SERVER_ADDRESS))
    {
        // Now wait for a reply from the server
        uint8_t len = sizeof(buf);
        uint8_t from;
        if (manager.recvfromAckTimeout(buf, &len, 2000, &from))
        {
            Serial.print("got reply from : 0x");
            Serial.print(from, HEX);
            Serial.print(": ");
            Serial.print((char*)buf);
            Serial.print(", RSSI: ");
            Serial.print(driver.lastRssi());
            Serial.print(", SNR: ");
            Serial.print(driver.lastSNR());
            Serial.println("");

            oled.clear();
            oled.print("RSSI: ");
            oled.println(driver.lastRssi());
            oled.print("SNR: ");
            oled.print(driver.lastSNR());
        }
        else
        {
            Serial.println("No reply, is rf95_reliable_datagram_server running?");
        }
    }
    else
        Serial.println("sendtoWait failed");
    delay(1000);
}


void initDisplay() {
    Serial.println(F("initializing display"));
    Wire.begin();
    Wire.setClock(400000L);

#if RST_PIN >= 0
    oled.begin(&Adafruit128x64, I2C_ADDRESS, RST_PIN);
#else // RST_PIN >= 0
    oled.begin(&Adafruit128x32, I2C_ADDRESS);
#endif // RST_PIN >= 0

    oled.setFont(System5x7);
    oled.clear();
    oled.println("Hello world!");
//    oled.setCursor(4,9);
    oled.println("dupa");
    Serial.println(F("display initialized"));
}